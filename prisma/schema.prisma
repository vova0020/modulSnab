// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
    seed = "node prisma/seed.js"
}

model User {
  id              Int             @id @default(autoincrement())
  firstName       String? // Имя
  lastName        String? // Фамилия
  login           String          @unique // Логин
  password        String // Пароль
  role            String? // роль
  requests        Request[] // Один пользователь может иметь несколько заявок
  changeHistories ChangeHistory[]
}


model Otdel {
  id       Int       @id @default(autoincrement())
  name     String // Название отдела
  requests Request[] // Один пользователь может иметь несколько заявок
}

model Sector {
  id       Int       @id @default(autoincrement())
  name     String // Название участка
  requests Request[] // Один пользователь может иметь несколько заявок
}

model Request {
  id                  Int             @id @default(autoincrement())
  date                DateTime?    @default(now()) // Дата заявки
  orderReason         String? // Зачем заказ
  subOrderReason      String? // Подкатегория зачем заказ
  comment             String? // Комментарий
  approvedForPurchase Boolean?         @default(false) // Прошло согласование к закупке
  approvedForPayment  Boolean?         @default(false) // Прошло согласование к оплате
  promptness          String? // Срочность  
  invoiceNumber       String? // Номер счета
  additionalComment   String? // Дополнительный комментарий
  creatorId           Int
  otdelId             Int
  sectorId            Int
  creator             User            @relation(fields: [creatorId], references: [id])
  otdel               Otdel           @relation(fields: [otdelId], references: [id])
  sector              Sector          @relation(fields: [sectorId], references: [id])
  statusId            Int
  status              Status          @relation(fields: [statusId], references: [id])
  items               RequestItem[] // Состав заявки
  images              Image[] // Изображения заявки
  statusHistory       StatusHistory[] // История статусов
  changeHistory       ChangeHistory[] // История изменений
}

model RequestItem {
  id             Int    @id @default(autoincrement())
  item           String? // Что заказано
  quantity       Int? // Количество
  
  unitMeasurement String? // Еденица измерения
  supplierName1C String? // Наименование из 1С
  supplierName   String? // Наименование у поставщика

  amount           Float? // Сумма
  deliveryDeadline DateTime? // Срок поставки
  requestId        Int
  request          Request   @relation(fields: [requestId], references: [id])
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String? // Ссылка на картинку
  file      String? // Сохранение изображения (путь или ссылка на файл)
  requestId Int
  request   Request @relation(fields: [requestId], references: [id])
}

model Status {
  id            Int             @id @default(autoincrement())
  name          String // Название статуса
  requests      Request[] // Один статус может быть у нескольких заявок
  statusHistory StatusHistory[] // Используется в истории статусов
}

model StatusHistory {
  id               Int      @id @default(autoincrement())
  date             DateTime // Дата изменения статуса
  requestId        Int
  request          Request  @relation(fields: [requestId], references: [id])
  statusId         Int
  status           Status   @relation(fields: [statusId], references: [id])
  previousStatusId Int? // Предыдущий статус
}

model ChangeHistory {
  id            Int      @id @default(autoincrement())
  date          DateTime // Дата изменения
  requestId     Int
  request       Request  @relation(fields: [requestId], references: [id])
  fieldChanged  String // Поле, которое было изменено
  previousValue String? // Старое значение
  newValue      String? // Новое значение
  changedById   Int
  changedBy     User     @relation(fields: [changedById], references: [id])
}
